// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: crudSimulador.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ElectricityServiceClient is the client API for ElectricityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElectricityServiceClient interface {
	CreateElecticity(ctx context.Context, in *ElectricityRequest, opts ...grpc.CallOption) (*ElectricityResponse, error)
}

type electricityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewElectricityServiceClient(cc grpc.ClientConnInterface) ElectricityServiceClient {
	return &electricityServiceClient{cc}
}

func (c *electricityServiceClient) CreateElecticity(ctx context.Context, in *ElectricityRequest, opts ...grpc.CallOption) (*ElectricityResponse, error) {
	out := new(ElectricityResponse)
	err := c.cc.Invoke(ctx, "/ElectricityService/CreateElecticity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElectricityServiceServer is the server API for ElectricityService service.
// All implementations must embed UnimplementedElectricityServiceServer
// for forward compatibility
type ElectricityServiceServer interface {
	CreateElecticity(context.Context, *ElectricityRequest) (*ElectricityResponse, error)
	mustEmbedUnimplementedElectricityServiceServer()
}

// UnimplementedElectricityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedElectricityServiceServer struct {
}

func (UnimplementedElectricityServiceServer) CreateElecticity(context.Context, *ElectricityRequest) (*ElectricityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateElecticity not implemented")
}
func (UnimplementedElectricityServiceServer) mustEmbedUnimplementedElectricityServiceServer() {}

// UnsafeElectricityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectricityServiceServer will
// result in compilation errors.
type UnsafeElectricityServiceServer interface {
	mustEmbedUnimplementedElectricityServiceServer()
}

func RegisterElectricityServiceServer(s grpc.ServiceRegistrar, srv ElectricityServiceServer) {
	s.RegisterService(&ElectricityService_ServiceDesc, srv)
}

func _ElectricityService_CreateElecticity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectricityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectricityServiceServer).CreateElecticity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElectricityService/CreateElecticity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectricityServiceServer).CreateElecticity(ctx, req.(*ElectricityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ElectricityService_ServiceDesc is the grpc.ServiceDesc for ElectricityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElectricityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ElectricityService",
	HandlerType: (*ElectricityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateElecticity",
			Handler:    _ElectricityService_CreateElecticity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crudSimulador.proto",
}
